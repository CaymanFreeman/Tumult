name: PyInstaller Build

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      app_name_lower:
        required: true
        type: string
      release_version:
        required: true
        type: string
    outputs:
      windows_version:
        value: Windows ${{ jobs.pyinstaller-windows.outputs.version_major }} (${{ jobs.pyinstaller-windows.outputs.version }})
      windows_build_name:
        value: ${{ jobs.pyinstaller-windows.outputs.build_name }}
      windows_installer_name:
        value: ${{ jobs.pyinstaller-windows.outputs.installer_name }}
      windows_server_build_name:
        value: ${{ jobs.pyinstaller-windows.outputs.server_build_name }}
      ubuntu_version:
        value: ${{ jobs.pyinstaller-ubuntu.outputs.version }}
      ubuntu_build_name:
        value: ${{ jobs.pyinstaller-ubuntu.outputs.build_name }}
      ubuntu_server_build_name:
        value: ${{ jobs.pyinstaller-ubuntu.outputs.server_build_name }}

permissions:
  contents: read

jobs:
  pyinstaller-ubuntu:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      build_name: ${{ steps.zip.outputs.ubuntu_build_name }}
      server_build_name: ${{ steps.zip.outputs.ubuntu_server_build_name }}
    strategy:
      matrix:
        python-version: [ 3.12 ]
    steps:
      - uses: actions/checkout@v4

      - name: Get Version
        id: get-version
        run: |
          version=$(lsb_release -ds)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set Up Environment
        run: |
          python -m venv .venv
          .venv/bin/activate

      - name: Install Dependencies
        run: |
          sudo apt-get install python3-dev python3-xlib binutils build-essential -y
          python -m pip install --upgrade pip
          pip install -r ./requirements.txt
          pip install pyinstaller

      - name: PyInstaller Client Build
        run: pyinstaller --noconfirm --onefile --name "${{ inputs.app_name_lower }}" --add-data="LICENSE.md:." --add-data="assets/client_window.ui:assets" src/client/main.py

      - name: PyInstaller Server Build
        run: pyinstaller --noconfirm --onefile --name "${{ inputs.app_name_lower }}-server" --add-data="LICENSE.md:." src/server/main.py

      - name: Compress & Zip Build
        id: zip
        run: |
          ubuntu_build_name=${{ inputs.app_name }}-${{ inputs.release_version }}-Linux-x64.gz
          gzip -c dist/${{ inputs.app_name_lower }} > $ubuntu_build_name
          echo "ubuntu_build_name=$ubuntu_build_name" >> $GITHUB_OUTPUT
          ubuntu_server_build_name=${{ inputs.app_name }}Server-${{ inputs.release_version }}-Linux-x64.gz
          gzip -c dist/${{ inputs.app_name_lower }}-server > $ubuntu_server_build_name
          echo "ubuntu_server_build_name=$ubuntu_server_build_name" >> $GITHUB_OUTPUT

      - name: Upload Client Build
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-build
          path: ${{ steps.zip.outputs.ubuntu_build_name }}
          if-no-files-found: error
          retention-days: 1

      - name: Upload Server Build
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-server-build
          path: ${{ steps.zip.outputs.ubuntu_server_build_name }}
          if-no-files-found: error
          retention-days: 1

  pyinstaller-windows:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_major: ${{ steps.get-version.outputs.version_major }}
      build_name: ${{ steps.zip.outputs.windows_build_name }}
      installer_name: ${{ steps.installer.outputs.installer_name }}
      server_build_name: ${{ steps.zip.outputs.windows_server_build_name }}
    strategy:
      matrix:
        python-version: [3.12]
    steps:
      - uses: actions/checkout@v4

      - name: Get Version
        id: get-version
        shell: pwsh
        run: |
          $ver = (Get-WmiObject Win32_OperatingSystem).Version
          $verMajor = if ([Environment]::OSVersion.Version.Major -eq 10) {
            if ([Environment]::OSVersion.Version.Build -ge 22000) { "11" } else { "10" }
          } else { "10" }
          echo "version=$ver" >> $env:GITHUB_OUTPUT
          echo "version_major=$verMajor" >> $env:GITHUB_OUTPUT

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set Up Environment
        run: |
          python -m venv .venv
          .venv\Scripts\activate.bat

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .\requirements.txt
          pip install pyinstaller

      - name: PyInstaller Client Build
        run: pyinstaller --noconfirm --onefile --name "${{ inputs.app_name }}" --windowed --add-data="LICENSE.md:." --icon="assets\icon.ico" --add-data="assets\icon.png:assets" --add-data="assets\client_window.ui:assets" src\client\main.py

      - name: PyInstaller Server Build
        run: pyinstaller --noconfirm --onefile --name "${{ inputs.app_name }}Server" --add-data="LICENSE.md:." --icon="assets\icon.ico" --add-data="assets\icon.png:assets" src\server\main.py

      - name: Compile Installer
        id: installer
        shell: pwsh
        run: |
          $version = "${{ inputs.release_version }}"
          $exeName = "${{ inputs.app_name }}.exe"
          $exePath = "$(Get-Location)\dist\$exeName"
          $iconPath = "$(Get-Location)\assets\icon.ico"
          $licensePath = "$(Get-Location)\LICENSE.md"
          $github = "https://github.com/${{ github.repository }}"
          $name = "${{ inputs.app_name }}"
          $publisher = "Cayman Freeman"

          iscc .github\workflows\installer.iss /V3 /DVersion="$version" /DExePath="$exePath" /DExeName="$exeName" /DIconPath="$iconPath" /DLicensePath="$licensePath" /DGitHub="$github" /DPublisher="$publisher" /DName="$name"
          
          Get-ChildItem -Recurse -Directory | Where-Object { $_.FullName -notmatch '\\\.venv|\\\.github' } | Select-Object FullName

          $installerName = "${{ inputs.app_name }}-Setup-x64.exe"
          Move-Item -Path ".github\workflows\Output\${{ inputs.app_name }}.exe" -Destination "$installerName" -ErrorAction Stop

          echo "installer_name=$installerName" >> $env:GITHUB_OUTPUT

      - name: Compress & Zip Build
        id: zip
        run: |
          $windowsBuildName = "${{ inputs.app_name }}-${{ inputs.release_version }}-Win-x64.zip"
          Compress-Archive -Path "dist\${{ inputs.app_name }}.exe" -DestinationPath "${windowsBuildName}"
          echo "windows_build_name=$windowsBuildName" >> $env:GITHUB_OUTPUT
          $windowsServerBuildName = "${{ inputs.app_name }}Server-${{ inputs.release_version }}-Win-x64.zip"
          Compress-Archive -Path "dist\${{ inputs.app_name }}Server.exe" -DestinationPath "${windowsServerBuildName}"
          echo "windows_server_build_name=$windowsServerBuildName" >> $env:GITHUB_OUTPUT

      - name: Upload Client Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ${{ steps.zip.outputs.windows_build_name }}
          if-no-files-found: error
          retention-days: 1

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ steps.installer.outputs.installer_name }}
          if-no-files-found: error
          retention-days: 1

      - name: Upload Server Build
        uses: actions/upload-artifact@v4
        with:
          name: windows-server-build
          path: ${{ steps.zip.outputs.windows_server_build_name }}
          if-no-files-found: error
          retention-days: 1